/**
 * Auto-generated sprite labeling system for ScapeRune
 * Generated by AI Sprite Labeler on ${new Date().toISOString()}
 */

export interface SpriteData {
  name: string;
  category: 'weapons' | 'armor' | 'food' | 'resources' | 'magic' | 'tools' | 'misc';
  subcategory: string;
  material?: string;
  description?: string;
  confidence?: number;
}

export interface SpriteLookup {
  [iconNumber: string]: SpriteData;
}

// Note: JSON files will be loaded dynamically to avoid TypeScript import issues
let SPRITE_LOOKUP: SpriteLookup = {};
let SPRITE_CATEGORIES: Record<string, Record<string, SpriteData>> = {};

// Initialize data
async function loadSpriteData() {
  try {
    const lookupResponse = await fetch('/sprite_lookup.json');
    const categoriesResponse = await fetch('/sprite_categories.json');
    
    SPRITE_LOOKUP = await lookupResponse.json();
    SPRITE_CATEGORIES = await categoriesResponse.json();
  } catch (error) {
    console.warn('Could not load sprite data:', error);
  }
}

// Load data when module is imported
loadSpriteData();

export { SPRITE_LOOKUP, SPRITE_CATEGORIES };

/**
 * Get sprite data by icon number
 */
export function getSpriteData(iconNumber: number | string): SpriteData | null {
  const key = iconNumber.toString();
  return SPRITE_LOOKUP[key] || null;
}

/**
 * Get sprite name by icon number
 */
export function getSpriteName(iconNumber: number | string): string {
  const data = getSpriteData(iconNumber);
  return data?.name || `Icon${iconNumber}`;
}

/**
 * Get all sprites in a category
 */
export function getSpritesByCategory(category: string): Array<{iconNumber: string, data: SpriteData}> {
  return Object.entries(SPRITE_LOOKUP)
    .filter(([, data]) => data.category === category)
    .map(([iconNumber, data]) => ({iconNumber, data}));
}

/**
 * Get all sprites by material (for weapons/armor)
 */
export function getSpritesByMaterial(material: string): Array<{iconNumber: string, data: SpriteData}> {
  return Object.entries(SPRITE_LOOKUP)
    .filter(([, data]) => data.material === material)
    .map(([iconNumber, data]) => ({iconNumber, data}));
}

/**
 * Search sprites by name
 */
export function searchSprites(searchTerm: string): Array<{iconNumber: string, data: SpriteData}> {
  const term = searchTerm.toLowerCase();
  return Object.entries(SPRITE_LOOKUP)
    .filter(([, data]) => 
      data.name.toLowerCase().includes(term) || 
      data.description?.toLowerCase().includes(term) ||
      data.subcategory.toLowerCase().includes(term)
    )
    .map(([iconNumber, data]) => ({iconNumber, data}));
}

/**
 * Get weapon sprites by type
 */
export function getWeaponsByType(weaponType: string): Array<{iconNumber: string, data: SpriteData}> {
  return Object.entries(SPRITE_LOOKUP)
    .filter(([, data]) => data.category === 'weapons' && data.subcategory === weaponType)
    .map(([iconNumber, data]) => ({iconNumber, data}));
}

/**
 * Get armor sprites by type
 */
export function getArmorByType(armorType: string): Array<{iconNumber: string, data: SpriteData}> {
  return Object.entries(SPRITE_LOOKUP)
    .filter(([, data]) => data.category === 'armor' && data.subcategory === armorType)
    .map(([iconNumber, data]) => ({iconNumber, data}));
}

/**
 * Get food sprites
 */
export function getFoodSprites(): Array<{iconNumber: string, data: SpriteData}> {
  return getSpritesByCategory('food');
}

/**
 * Get resource sprites
 */
export function getResourceSprites(): Array<{iconNumber: string, data: SpriteData}> {
  return getSpritesByCategory('resources');
}

/**
 * Category constants for easy reference
 */
export const SPRITE_CATEGORIES_LIST = {
  WEAPONS: 'weapons',
  ARMOR: 'armor', 
  FOOD: 'food',
  RESOURCES: 'resources',
  MAGIC: 'magic',
  TOOLS: 'tools',
  MISC: 'misc'
} as const;

/**
 * Material constants for weapons/armor
 */
export const MATERIALS = {
  BRONZE: 'bronze',
  IRON: 'iron',
  STEEL: 'steel',
  MITHRIL: 'mithril',
  ADAMANT: 'adamant',
  RUNE: 'rune',
  DRAGON: 'dragon'
} as const;

/**
 * Weapon type constants
 */
export const WEAPON_TYPES = {
  SWORD: 'sword',
  SCIMITAR: 'scimitar',
  LONGSWORD: 'longsword',
  DAGGER: 'dagger',
  MACE: 'mace',
  WARHAMMER: 'warhammer',
  AXE: 'axe',
  BATTLEAXE: 'battleaxe',
  BOW: 'bow',
  CROSSBOW: 'crossbow',
  STAFF: 'staff',
  SPEAR: 'spear',
  HALBERD: 'halberd'
} as const;

/**
 * Armor type constants
 */
export const ARMOR_TYPES = {
  HELMET: 'helmet',
  CHESTPLATE: 'chestplate',
  PLATELEGS: 'platelegs',
  BOOTS: 'boots',
  GLOVES: 'gloves',
  SHIELD: 'shield'
} as const;
